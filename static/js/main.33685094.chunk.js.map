{"version":3,"sources":["utils/currencies.js","utils/dates.js","components/header/Header.js","utils/strings.js","api/fiiApi.js","hooks/useFileUpload.js","App.js","serviceWorker.js","index.js"],"names":["REAL","value","isFormat","currency","symbol","decimal","separator","pattern","format","SUM","value1","value2","add","Date","TODAY","DateTime","local","setLocale","toLocaleString","DATE_HUGE","FROM_STRING","fromFormat","locale","Header","props","text","customerName","today","firstName","slice","indexOf","className","b3Fiis","useFileUpload","useState","operations","setOperations","stocks","setStocks","setCustomerName","fileCEI","setFileCEI","loadingFile","setLoadingFile","total","setTotal","dividends","purchaseCost","setPurchaseCost","profit","setProfit","useEffect","SheetNames","forEach","sheetName","rowObj","XLSX","utils","sheet_to_row_object_array","Sheets","indexBegin","findIndex","row","__EMPTY_1","indexLast","isCustomerName","stocksOperation","line","index","toLowerCase","operation","dateOperation","trim","data","operacao","__EMPTY_3","ticket","__EMPTY_6","length","isSubscription","qtde","__EMPTY_8","price","__EMPTY_9","__EMPTY_10","isFII","find","f","code","previousState","concat","prevState","subtract","stock","s","i","Math","round","averagePrice","splice","abs","push","Object","assign","sort","a","b","sumTotal","reduce","prev","onChangeHandler","event","input","target","reader","FileReader","onload","fileData","result","wb","read","type","readAsBinaryString","files","useStyles","makeStyles","root","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","useStylesGrid","theme","flexGrow","paper","height","width","control","padding","spacing","App","classes","onChange","accept","id","htmlFor","Button","variant","color","component","Grid","container","item","xs","Card","CardContent","Typography","gutterBottom","Box","Paper","CardHeader","TableContainer","Table","stickyHeader","table","size","aria-labelledby","TableHead","TableRow","TableCell","align","TableBody","map","key","scope","Chip","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.33685094.chunk.js","sourcesContent":["/**\n * @license\n * Copyright © 2020 Gabriel dos Santos.\n */\n\nimport currency from 'currency.js';\n\nexport const REAL = (value, isFormat = true) => currency(value, {\n    symbol: 'R$',\n    decimal: ',',\n    separator: '.',\n    pattern: `! #`,\n}).format(isFormat);\nexport const CURRENCY = (value) => currency(value);\nexport const USD = (value, isFormat = true) => currency(value, {}).format(isFormat);\nexport const SUM = (value1, value2) => currency(value1).add(value2);\nexport const DIVIDER = (value1, value2) => currency(value1).subtract(value2);","/**\n * @license\n * Copyright © 2020 Gabriel dos Santos.\n */\n\nimport { DateTime } from 'luxon';\n\nconst locale = 'pt-br';\n\nexport const Date = {\n    TODAY: DateTime.local().setLocale(locale).toLocaleString(DateTime.DATE_HUGE),\n    FROM_STRING: value => DateTime.fromFormat(value, 'dd/MM/yy', {locale: locale})\n}","/**\n * @license\n * Copyright © 2020 Gabriel dos Santos.\n */\n\nimport React from 'react';\nimport { firstWordFromAText } from '../../utils';\n\nexport const Header = props => {\n    const {customerName, today} = props;\n    const firstName = firstWordFromAText(customerName);\n    \n    return (\n        <header className=\"App-header\">\n            <h3 className=\"welcome-title\">Bem vindo\n                {firstName && <span className=\"capitalize\">, {firstName} </span>}\n                <span className=\"today capitalize\"> {today}</span>\n            </h3>\n            <hr className=\"divider\"/>\n            <h3 className=\"welcome-title\">Visão Geral das Finanças</h3>\n        </header>\n    )\n};","/**\n * @license\n * Copyright © 2020 Gabriel dos Santos.\n */\n\nexport const firstWordFromAText = text => text && text.slice(0, text.indexOf(' '));","/**\n * @license\n * Copyright © 2020 Gabriel dos Santos.\n */\n\nimport fiisJSON from '../repo/fiis';\n\nexport const b3Fiis = fiisJSON;","/**\n * @license\n * Copyright © 2020 Gabriel dos Santos.\n */\n\nimport { useEffect, useState } from 'react';\n\nimport XLSX from 'xlsx';\nimport { b3Fiis } from '../api';\nimport { Date, CURRENCY, SUM, DIVIDER } from '../utils';\n\nconst useFileUpload = () => {\n    const [operations, setOperations] = useState([]);\n    const [stocks, setStocks] = useState([]);\n    const [customerName, setCustomerName] = useState('');\n    const [fileCEI, setFileCEI] = useState(null);\n    const [loadingFile, setLoadingFile] = useState(false);\n    const [total, setTotal] = useState(0.0);\n    const [dividends, setDividends] = useState(0.0);\n    const [purchaseCost, setPurchaseCost] = useState(0.0);\n    const [profit, setProfit] = useState(0.0);\n    \n    useEffect(() => {\n        setOperations([]);\n        setTotal(0);\n        setPurchaseCost(0);\n        if (fileCEI) {\n            fileCEI.SheetNames.forEach(sheetName => {\n                const rowObj = XLSX.utils.sheet_to_row_object_array(fileCEI.Sheets[sheetName]);\n                const indexBegin = rowObj.findIndex(row => row.__EMPTY_1 === 'Data Negócio');\n                const indexLast = rowObj.findIndex(row => row.__EMPTY_1 === 'Subreports within table/matrix cells are ignored.');\n                let isCustomerName = false;\n                \n                let stocksOperation = [];\n                \n                rowObj.forEach((line, index) => {\n                    if (isCustomerName) {\n                        setCustomerName(line.__EMPTY_1.toLowerCase());\n                        isCustomerName = false;\n                    }\n                    if (line.__EMPTY_1 === 'Nome do Cliente') {\n                        isCustomerName = true;\n                    }\n                    \n                    if (index > indexBegin && index < indexLast) {\n                        let operation = {};\n                        const dateOperation = line.__EMPTY_1 && line.__EMPTY_1.trim();\n                        operation.data = dateOperation && Date.FROM_STRING(dateOperation);\n                        operation.operacao = line.__EMPTY_3 && line.__EMPTY_3.trim(); // compra/venda\n                        operation.ticket = line.__EMPTY_6; // compra/venda\n                        if (operation.ticket.indexOf('F', 5) !== -1) {\n                            operation.ticket = operation.ticket.slice(0, 5);\n                        } else if (operation.ticket.length > 5 && operation.ticket.indexOf('1', 5) === -1) {\n                            operation.ticket = operation.ticket.slice(0, 5) + '1';\n                            operation.isSubscription = true;\n                        }\n                        operation.qtde = line.__EMPTY_8; // quantidade\n                        operation.price = line.__EMPTY_9; // valor unidade\n                        operation.total = line.__EMPTY_10; // total\n                        operation.isFII = !!b3Fiis.find(f => f.code === operation.ticket);\n                        \n                        setOperations(previousState => previousState.concat(operation));\n                        \n                        setPurchaseCost(prevState => {\n                            const sum = operation.operacao === 'C'\n                                ? SUM(prevState, operation.total).value\n                                : !operation.isSubscription ? DIVIDER(prevState, operation.total).value : prevState;\n                            return sum\n                        });\n                        \n                        if (!operation.isSubscription) {\n                            let index = null;\n                            let stock = stocksOperation.find((s, i) => {\n                                index = i;\n                                return s.ticket === operation.ticket\n                            });\n                            if (stock) {\n                                if (operation.operacao === 'C') {\n                                    stock.qtde += operation.qtde;\n                                    stock.total = Math.round((stock.total + operation.total) * 100) / 100;\n                                    stock.averagePrice = stock.total / stock.qtde;\n                                } else {\n                                    stock.qtde -= operation.qtde;\n                                    if (stock.qtde === 0) {\n                                        stocksOperation.splice(index, 1);\n                                        stock.profit = 0;\n                                    } else {\n                                        stock.total = Math.round((stock.total - operation.total) * 100) / 100;\n                                        stock.averagePrice = stock.total / stock.qtde;\n                                    }\n                                    if (stock.total < 0) {\n                                        stock.profit = stock.total;\n                                        setProfit(prevState => prevState + Math.abs(stock.total))\n                                    }\n                                }\n                            } else {\n                                stocksOperation.push(Object.assign('', operation));\n                            }\n                        }\n                    }\n                });\n                \n                setStocks(stocksOperation.sort((a, b) => a.ticket - b.ticket));\n                const sumTotal = stocksOperation.reduce((a, b) => {\n                    return a.add(b.total);\n                }, SUM(0, 0));\n                setTotal(sumTotal);\n            });\n            \n        }\n        setLoadingFile(false);\n        setOperations(prev => prev.sort((a, b) => b.data - a.data));\n    }, [fileCEI]);\n    \n    const onChangeHandler = event => {\n        setOperations([]);\n        setLoadingFile(true);\n        const input = event.target;\n        const reader = new FileReader();\n        reader.onload = () => {\n            const fileData = reader.result;\n            const wb = XLSX.read(fileData, {type: 'binary'});\n            setFileCEI(wb);\n        };\n        reader.readAsBinaryString(input.files[0]);\n    };\n    \n    return {\n        customerName,\n        operations,\n        loadingFile,\n        setFileCEI,\n        total,\n        dividends,\n        profit,\n        purchaseCost,\n        stocks,\n        \n        onChangeHandler\n    }\n    \n};\n\nexport default useFileUpload;","/**\n * @license\n * Copyright © 2020 Gabriel dos Santos.\n */\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport Box from '@material-ui/core/Box';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport { CardHeader } from '@material-ui/core';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Chip from '@material-ui/core/Chip';\n\nimport Chart from 'chart.js';\n\nimport { Header } from './components';\nimport { REAL, Date } from './utils';\n\nimport './App.css';\nimport 'typeface-roboto';\n\nimport { useFileUpload } from './hooks'\n\nconst useStyles = makeStyles({\n    root: {\n        minWidth: 275,\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n});\n\nconst useStylesGrid = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    paper: {\n        height: 140,\n        width: 100,\n    },\n    control: {\n        padding: theme.spacing(2),\n    },\n}));\n\nconst App = () => {\n    const classes = useStyles();\n    const classesGrid = useStylesGrid();\n    const {\n        customerName, operations, onChangeHandler,\n        total, purchaseCost, profit, dividends, stocks, loadingFile\n    } = useFileUpload();\n    \n    function FormRow() {\n        return (\n            <React.Fragment>\n                <Grid item xs={4}>\n                    <Paper className={classes.paper}>item</Paper>\n                </Grid>\n                <Grid item xs={4}>\n                    <Paper className={classes.paper}>item</Paper>\n                </Grid>\n                <Grid item xs={4}>\n                    <Paper className={classes.paper}>item</Paper>\n                </Grid>\n            </React.Fragment>\n        );\n    }\n    \n    return (\n        <div className=\"invest-root\">\n            <Header\n                customerName={customerName}\n                today={Date.TODAY}\n            />\n            \n            <div>\n                <input\n                    onChange={onChangeHandler}\n                    accept=\".xls\"\n                    id=\"uploadCEI\"\n                    type=\"file\"\n                    className=\"display-none\"\n                />\n                <label htmlFor=\"uploadCEI\">\n                    <Button variant=\"contained\" color=\"primary\" component=\"span\">\n                        Upload Arquivo CEI *.XLS\n                    </Button>\n                </label>\n            </div>\n            <br/>\n            \n            <Grid container spacing={3}>\n                <Grid item xs>\n                    <Card className={classes.root}>\n                        <CardContent>\n                            <Typography className='card-total-typo' variant=\"h6\" gutterBottom>\n                                Patrimônio\n                            </Typography>\n                            <Typography className='card-total-typo' variant=\"h3\" gutterBottom>\n                                <Box component=\"div\">\n                                    {REAL(total)}\n                                </Box>\n                            </Typography>\n                        </CardContent>\n                    </Card>\n                </Grid>\n                <Grid item xs>\n                    <Card className={classes.root}>\n                        <CardContent>\n                            <Typography className='card-total-typo' variant=\"h6\" gutterBottom>\n                                Custo de aquisição\n                            </Typography>\n                            <Typography className='card-total-typo' variant=\"h3\" gutterBottom>\n                                <Box component=\"div\">\n                                    {REAL(purchaseCost)}\n                                </Box>\n                            </Typography>\n                        </CardContent>\n                    </Card>\n                </Grid>\n                <Grid item xs>\n                    <Card className={classes.root}>\n                        <CardContent>\n                            <Typography className='card-total-typo' variant=\"h6\" gutterBottom>\n                                Proventos acumulados\n                            </Typography>\n                            <Typography className='card-total-typo' variant=\"h3\" gutterBottom>\n                                <Box component=\"div\">\n                                    {REAL(dividends)}\n                                </Box>\n                            </Typography>\n                        </CardContent>\n                    </Card>\n                </Grid>\n                <Grid item xs>\n                    <Card className={classes.root}>\n                        <CardContent>\n                            <Typography className='card-total-typo' variant=\"h6\" gutterBottom>\n                                Lucro com operações\n                            </Typography>\n                            <Typography className='card-total-typo' variant=\"h3\" gutterBottom>\n                                <Box component=\"div\">\n                                    {REAL(profit)}\n                                </Box>\n                            </Typography>\n                        </CardContent>\n                    </Card>\n                </Grid>\n            </Grid>\n            \n            <Grid container spacing={3}>\n                <Grid item xs>\n                    <Paper>\n                        <Card className={classes.root}>\n                            <CardHeader title=\"Posição Atual\"/>\n                            <TableContainer component={Paper} className=\"auto-scroll\">\n                                <Table stickyHeader className={classes.table} size=\"small\"\n                                       aria-labelledby=\"Posição Atual\">\n                                    <TableHead>\n                                        <TableRow>\n                                            <TableCell align=\"center\">Ativo</TableCell>\n                                            <TableCell align=\"right\">Preço</TableCell>\n                                            <TableCell align=\"center\">Qtde</TableCell>\n                                            <TableCell align=\"right\">P/M</TableCell>\n                                            <TableCell align=\"right\">Lucro</TableCell>\n                                            <TableCell align=\"right\">Total</TableCell>\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                        {stocks.map((operation, index) => (\n                                            <TableRow key={index}>\n                                                <TableCell align=\"center\">{operation.ticket}</TableCell>\n                                                <TableCell align=\"right\">{REAL(operation.price,false)}</TableCell>\n                                                <TableCell align=\"center\">{operation.qtde}</TableCell>\n                                                <TableCell align=\"right\">{REAL(operation.averagePrice,false)}</TableCell>\n                                                <TableCell align=\"right\">{REAL(operation.profit,false)}</TableCell>\n                                                <TableCell align=\"right\">{REAL(operation.total,false)}</TableCell>\n                                            </TableRow>\n                                        ))}\n                                    </TableBody>\n                                </Table>\n                            </TableContainer>\n                        </Card>\n                    </Paper>\n                </Grid>\n                <Grid item xs>\n                    <Paper>\n                        <Card className={classes.root}>\n                            <CardHeader title=\"Operações\"/>\n                            <TableContainer component={Paper} className=\"auto-scroll\">\n                                <Table stickyHeader className={classes.table} size=\"small\" aria-labelledby=\"Operações\">\n                                    <TableHead>\n                                        <TableRow>\n                                            <TableCell align=\"center\">Data</TableCell>\n                                            <TableCell>Ativo</TableCell>\n                                            <TableCell align=\"center\">Operação</TableCell>\n                                            <TableCell align=\"center\">Quantidade</TableCell>\n                                            <TableCell align=\"right\">Preço</TableCell>\n                                            <TableCell align=\"right\">Total</TableCell>\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                        {operations.map((operation, index) => (\n                                            <TableRow key={index}>\n                                                <TableCell align=\"center\">{operation.data.toLocaleString()}</TableCell>\n                                                <TableCell component=\"th\" scope=\"row\">{operation.ticket}</TableCell>\n                                                <TableCell align=\"center\">\n                                                    <Chip\n                                                        className={operation.operacao === 'C' ? 'chip-buy' : 'chip-sell'}\n                                                        label={operation.operacao === 'C' ? 'Compra' : 'Venda'}\n                                                    />\n                                                </TableCell>\n                                                <TableCell\n                                                    className={operation.qtde >= 100 ? 'chip-bigger-100' : ''}\n                                                    align=\"center\">\n                                                    {operation.qtde}\n                                                </TableCell>\n                                                <TableCell align=\"right\">{REAL(operation.price, false)}</TableCell>\n                                                <TableCell align=\"right\">{REAL(operation.total)}</TableCell>\n                                            </TableRow>\n                                        ))}\n                                    </TableBody>\n                                </Table>\n                            </TableContainer>\n                        </Card>\n                    \n                    \n                    </Paper>\n                </Grid>\n            </Grid>\n            {/*<canvas id=\"myChart\" width=\"400\" height=\"400\"></canvas>*/}\n            \n            {/*{operations.map((operation, index) => {*/}\n            {/*    return (*/}\n            {/*        <div key={index} className={operation.isFII ? 'is-fii' : ''}>*/}\n            {/*            {operation.data.toLocaleString()} {operation.ticket} {operation.operacao} {operation.ticket} {operation.qtde} {operation.price} {operation.total}*/}\n            {/*        </div>*/}\n            {/*    */}\n            {/*    )*/}\n            {/*})}*/}\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'typeface-roboto';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}